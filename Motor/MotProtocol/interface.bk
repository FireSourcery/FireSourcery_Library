

// extern uint8_t MotPacket_Req_Control_Build(MotPacket_ControlReq_T * p_reqPacket, const MotPacket_Interface_T * p_interface);
// extern uint8_t MotPacket_MonitorReq_Build(MotPacket_MonitorReq_T * p_reqPacket, const MotPacket_Interface_T * p_interface);
// extern bool MotPacket_Resp_Parse(MotPacket_Interface_T * p_interface, const MotPacket_T * p_rxPacket);

// typedef struct MotPacket_Interface_Tag
// {
//  	union
// 	{
// 		MotPacket_Registers_T Registers;

// 		MotPacket_ControlReq_Payload_T ReqControl;
// 		MotPacket_ControlReq_Throttle_Payload_T ReqThrottle;
// 		MotPacket_MonitorReq_Payload_T ReqMonitor;
// 		MotPacket_ReadImmediateReq_Payload_T ReqReadImmediate;

// 		MotPacket_ReadImmediateResp_Payload_T RespReadImmediate;
// 		MotPacket_MonitorResp_Payload_T RespMonitor;
// 		MotPacket_MonitorResp_Speed_Payload_T Speed;
// 		MotPacket_MonitorResp_IPhases_Payload_T IPhases;
// 	};
// }
// MotPacket_Interface_T;

// typedef struct MotPacket_Interface_Tag
// {
// 	union
// 	{
// 		MotPacket_ControlReq_Payload_T ReqControl;
// 		MotPacket_ControlReq_Throttle_Payload_T ReqThrottle;
// 		MotPacket_MonitorReq_Payload_T ReqMonitor;
// 		MotPacket_ReadImmediateReq_Payload_T ReqReadImmediate;
// 	};
// 	struct
// 	{
// 		MotPacket_ReadImmediateResp_Payload_T RespReadImmediate;
// 		MotPacket_MonitorResp_Payload_T RespMonitor;
// 		MotPacket_MonitorResp_Speed_Payload_T Speed;
// 		MotPacket_MonitorResp_IPhases_Payload_T IPhases;
// 	};
// }
// MotPacket_Interface_T;


/******************************************************************************/
/*!
	Interface verion - directly map to Protocol module Table for compositiion
		when app uses same interface type included in MotPacket,
		alternatively, app provide function to map to alternate app interface
*/
/******************************************************************************/

/* only valid on set req, reads from set interface */
// uint8_t MotPacket_GetRespLength(const MotPacket_Interface_T * p_interface, MotPacket_HeaderId_T id)
// {
// 	uint8_t respPayloadLength;

// 	switch(id)
// 	{
// 		case MOT_PROTOCOL_CMD_CONTROL_TYPE: respPayloadLength = MotPacket_GetControlRespLength(p_interface->ReqControl.ControlId); break;
// 		case MOT_PROTOCOL_CMD_MONITOR_TYPE: respPayloadLength = MotPacket_GetControlRespLength(p_interface->ReqMonitor.MonitorId); break;
// 		default: respPayloadLength = 0U; break;
// 	}

// 	return respPayloadLength;
// }

/*
	Using Packet Interface
	Cmdr side parse Resp
	Ctrlr side parse Req
*/
/*
	Parse returns upto 16 2-byte values, 32 1-byte values
*/
// bool MotPacket_Rx_Parse(MotPacket_Interface_T * p_interface, const MotPacket_T * p_respPacket)
// {
// 	bool status = Packet_CheckChecksum(p_respPacket);
// 	if(status == true) { memcpy(p_interface, &p_respPacket->Payload, p_respPacket->Header.Length); }
// 	return status;
// }

// uint8_t MotPacket_InterfaceReq_ReadImmediate_Build(MotPacket_ReadImmediateReq_T * p_reqPacket, const MotPacket_Interface_T * p_interface)
// {
// 	memcpy(&p_reqPacket->ReadReq, &p_interface->ReqReadImmediate, sizeof(MotPacket_ReadImmediateReq_Payload_T));
// 	return Packet_BuildHeader((MotPacket_T *)p_reqPacket, MOT_PROTOCOL_CMD_READ_IMMEDIATE, sizeof(MotPacket_ReadImmediateReq_Payload_T));
// }

// MotPacket_Status_T MotPacket_InterfaceResp_ReadImmediate_Parse(MotPacket_Interface_T * p_respInterface, const MotPacket_Interface_T * p_reqInterface, const MotPacket_ReadImmediateResp_T * p_respPacket)
// {
// 	switch(p_reqInterface->ReqReadImmediate.MotVarId)
// 	{
// 		case MOT_VAR_POLE_PAIRS: p_respInterface-> = p_respPacket->ReadResp; break;

// 	}
// }

/*
	Req Control (General)
	payloadLength determined by ControlId

	Req includes Id in Payload
*/
// uint8_t MotPacket_Req_Control_Build(MotPacket_ControlReq_T * p_reqPacket, const MotPacket_Interface_T * p_interface)
// {
// 	uint8_t payloadLength;
// 	switch(p_interface->ReqControl.ControlId)
// 	{
// 		case MOT_PROTOCOL_CONTROL_STOP: 		payloadLength = 1U; 												break;
// 		case MOT_PROTOCOL_CONTROL_THROTTLE: 	payloadLength = sizeof(MotPacket_ControlReq_Throttle_Payload_T); 	break;
// 		case MOT_PROTOCOL_CONTROL_BRAKE: 	payloadLength = sizeof(MotPacket_ControlReq_Brake_Payload_T); 		break;
// 		default: payloadLength = 0U; break;
// 	}

// 	memcpy(&p_reqPacket->ControlReq, p_interface, payloadLength); //interface.req
// 	return Packet_BuildHeader((MotPacket_T *)p_reqPacket, MOT_PROTOCOL_CMD_CONTROL_TYPE, payloadLength);
// }


/*
	Req Monitor
*/
// uint8_t MotPacket_MonitorReq_Build(MotPacket_MonitorReq_T * p_reqPacket, const MotPacket_ReqInterface_T * p_interface)
// uint8_t MotPacket_MonitorReq_Build(MotPacket_MonitorReq_T * p_reqPacket, const MotPacket_Interface_T * p_interface)
// {
// 	// memcpy(&p_reqPacket->MonitorReq, p_interface, 1U);
// 	p_reqPacket->MonitorReq.MonitorId = p_interface->ReqMonitor.MonitorId;
// 	return Packet_BuildHeader((MotPacket_T *)p_reqPacket, MOT_PROTOCOL_CMD_MONITOR_TYPE, sizeof(MotPacket_MonitorReq_Payload_T));
// }

// void MotPacket_Inteface_MonitorResp_Parse(MotPacket_Interface_T * p_respInterface, const MotPacket_Interface_T * p_reqInterface, const MotPacket_MonitorResp_T * p_respPacket)
// {
// 	switch(p_reqInterface->ReqMonitor.MonitorId)
// 	{
// 		case MOT_PROTOCOL_MONITOR_SPEED: 			MotPacket_Resp_ParseMonitorSpeed(&p_respInterface->Speed.Speed, p_respInterface); 	break;
// 		case MOT_PROTOCOL_MONITOR_I_PHASES: 				break;
// 		case MOT_PROTOCOL_MONITOR_ADC_BATCH_MSB: 		break;
// 	}
// }



/******************************************************************************/
/* One function handle all cases, alternatively use typeId is function table index */
/******************************************************************************/
// uint8_t MotPacket_Req_Build(MotPacket_MonitorReq_T * p_reqPacket, const MotPacket_Interface_T * p_interface, MotPacket_HeaderId_T typeId)
// {
// 	uint8_t txLength = MotPacket_Sync_Build((MotPacket_Sync_T  *)p_reqPacket, typeId);

// 	if(txLength == 0U)
// 	{
// 		switch(typeId)
// 		{
// 			case MOT_PROTOCOL_CMD_MONITOR_TYPE: 	txLength = MotPacket_MonitorReq_Build((MotPacket_MonitorReq_T *)p_reqPacket, p_interface);	break;
// 			case MOT_PROTOCOL_CMD_CONTROL_TYPE: 	txLength = MotPacket_Req_Control_Build((MotPacket_ControlReq_T *)p_reqPacket, p_interface);	break;
// 			default: break;
// 		}
// 	}

// 	return txLength;
// }



/* cmdr */

/* Resp does not include SubId in payload */
// uint8_t MotPacket_Resp_Monitor_Build(MotPacket_MonitorResp_T * p_respPacket, const MotPacket_Interface_T * p_interface, MotPacket_MonitorId_T monitorId)
// {
// 	uint8_t payloadLength = MotPacket_GetMonitorRespLength(monitorId);
// 	memcpy(&p_respPacket->Values, p_interface, payloadLength);

// 	p_respPacket->Values.U16s[0U] = p_interface.rx.focA;

// 	return Packet_BuildHeader((MotPacket_T *)p_respPacket, MOT_PROTOCOL_CMD_MONITOR_TYPE, payloadLength);
// }

