//static inline void HAL_Flash_WriteCmdWritePage(HAL_Flash_T * p_regs)
//{
//	FTFx_FCCOB0 = FTFx_PROGRAM_PHRASE;
//}
//
//static inline void HAL_Flash_WriteCmdWriteData(HAL_Flash_T * p_regs, const uint8_t * p_data)
//{
//	for (uint8_t i = 0U; i < FTFx_PHRASE_SIZE; i++)
//	{
//		((uint8_t*)FTFx_BASE)[i + 0x08U] = p_data[i];
//	}
//}
//
//static inline void HAL_Flash_WriteCmdEraseSector(HAL_Flash_T * p_regs)
//{
//	FTFx_FCCOB0 = FTFx_ERASE_SECTOR;
//}
//
//static inline void HAL_Flash_WriteCmdVerifyEraseSector(HAL_Flash_T * p_regs)
//{
//	FTFx_FCCOB0 = FTFx_VERIFY_SECTION;
//}
//
//static inline void HAL_Flash_WriteCmdVerifyWritePage(HAL_Flash_T * p_regs)
//{
//	FTFx_FCCOB0 = FTFx_PROGRAM_CHECK;
//}
//
//static inline void HAL_Flash_WriteCmdWriteOnce(HAL_Flash_T * p_regs)
//{
//	FTFx_FCCOB0 = FTFx_PROGRAM_ONCE;
//}
//
//static inline void HAL_Flash_WriteCmdReadOnce(HAL_Flash_T * p_regs)
//{
//	FTFx_FCCOB0 = FTFx_READ_ONCE;
//}
//
//static inline void HAL_Flash_WriteCmdWriteDest(HAL_Flash_T * p_regs, const uint8_t * p_dest){HAL_Flash_WriteCmdDest(p_regs, p_dest);}
//static inline void HAL_Flash_WriteCmdWriteStart(HAL_Flash_T * p_regs){HAL_Flash_WriteCmdStart(p_regs);}
//static inline bool HAL_Flash_ReadCompleteWriteFlag(HAL_Flash_T * p_regs){return HAL_Flash_ReadCompleteFlag(p_regs);}
//static inline void HAL_Flash_PrepCmdWrite(HAL_Flash_T * p_regs, const uint8_t * p_dest, const uint8_t * p_data){}
//
//static inline void HAL_Flash_WriteCmdEraseDest(HAL_Flash_T * p_regs, const uint8_t * p_dest){HAL_Flash_WriteCmdDest(p_regs, p_dest);}
//static inline void HAL_Flash_WriteCmdEraseStart(HAL_Flash_T * p_regs){HAL_Flash_WriteCmdStart(p_regs);}
//static inline bool HAL_Flash_ReadCompleteEraseFlag(HAL_Flash_T * p_regs){return HAL_Flash_ReadCompleteFlag(p_regs);}
//static inline void HAL_Flash_PrepCmdErase(HAL_Flash_T * p_regs, const uint8_t * p_dest){}
//
//static inline void HAL_Flash_WriteCmdVerifyWriteDest(HAL_Flash_T * p_regs, const uint8_t * p_dest){HAL_Flash_WriteCmdDest(p_regs, p_dest);}
//static inline void HAL_Flash_WriteCmdVerifyWriteStart(HAL_Flash_T * p_regs){HAL_Flash_WriteCmdStart(p_regs);}
//static inline bool HAL_Flash_ReadCompleteVerifyWriteFlag(HAL_Flash_T * p_regs){return HAL_Flash_ReadCompleteFlag(p_regs);}
//static inline void HAL_Flash_PrepCmdVerifyWrite(HAL_Flash_T * p_regs, const uint8_t * p_dest){}
//
//static inline void HAL_Flash_WriteCmdVerifyEraseDest(HAL_Flash_T * p_regs, const uint8_t * p_dest){HAL_Flash_WriteCmdDest(p_regs, p_dest);}
//static inline void HAL_Flash_WriteCmdVerifyEraseStart(HAL_Flash_T * p_regs){HAL_Flash_WriteCmdStart(p_regs);}
//static inline bool HAL_Flash_ReadCompleteVerifyEraseFlag(HAL_Flash_T * p_regs){return HAL_Flash_ReadCompleteFlag(p_regs);}
//static inline void HAL_Flash_PrepCmdVerifyErase(HAL_Flash_T * p_regs, const uint8_t * p_dest){}
 
//static inline void HAL_Flash_WriteCmdWriteOnceDest(HAL_Flash_T * p_regs, const uint8_t * p_dest)
//{
//	uint8_t recordIndex = p_dest - (uint8_t *)HAL_FLASH_ONCE_START;
//
//	FTFx_FCCOB1 = recordIndex;
//}
//static inline void HAL_Flash_WriteCmdWriteOnceData(HAL_Flash_T *p_regs, const uint8_t * p_data){HAL_Flash_WriteCmdWriteData(p_regs, p_data);}
//static inline void HAL_Flash_WriteCmdWriteOnceStart(HAL_Flash_T * p_regs){HAL_Flash_WriteCmdStart(p_regs);}
//static inline bool HAL_Flash_ReadCompleteWriteOnceFlag(HAL_Flash_T * p_regs){return HAL_Flash_ReadCompleteFlag(p_regs);}
//static inline void HAL_Flash_PrepCmdWriteOnce(HAL_Flash_T * p_regs, const uint8_t * p_dest, const uint8_t * p_data){}
//
//static inline void HAL_Flash_WriteCmdReadOnceDest(HAL_Flash_T * p_regs, const uint8_t * p_dest)
//{
//	HAL_Flash_WriteCmdWriteOnceDest(p_regs, p_dest);
//}
//static inline void HAL_Flash_WriteCmdReadOnceStart(HAL_Flash_T * p_regs){HAL_Flash_WriteCmdStart(p_regs);}
//static inline bool HAL_Flash_ReadCompleteReadOnceFlag(HAL_Flash_T * p_regs){return HAL_Flash_ReadCompleteFlag(p_regs);}
//static inline void HAL_Flash_ReadOnceData(HAL_Flash_T *p_regs, uint8_t * p_result)
//{
//	for (uint8_t i = 0U; i < FTFx_PHRASE_SIZE; i++)
//	{
//        p_result[i] = ((uint8_t *)FTFx_BASE)[i + 0x08U];
//    }
//}
//static inline void HAL_Flash_PrepCmdReadOnce(HAL_Flash_T * p_regs, const uint8_t * p_dest){}


static inline bool StartWritePage(const Flash_T * p_flash, const uint8_t * p_destFlash, const uint8_t * p_data)
{
	bool isStarted = false;

	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_PrepCmdWritePage(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, p_data); //Chip unique procedures
//	HAL_Flash_WriteCmdWritePage(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_WriteCmdWriteDest(p_flash->CONFIG.P_HAL_FLASH, p_destFlash);
//	HAL_Flash_WriteCmdWriteData(p_flash->CONFIG.P_HAL_FLASH, p_data);
//	HAL_Flash_WriteCmdWriteStart(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdWritePage(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, p_data);  //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}

    return isStarted;
}

static inline bool StartEraseSector(const Flash_T * p_flash, const uint8_t * p_destFlash)
{
	bool isStarted = false;

	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_PrepCmdErase(p_flash->CONFIG.P_HAL_FLASH, p_destFlash); //Chip unique procedures
//	HAL_Flash_WriteCmdEraseSector(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_WriteCmdEraseDest(p_flash->CONFIG.P_HAL_FLASH, p_destFlash);
//	HAL_Flash_WriteCmdEraseStart(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdEraseSector(p_flash->CONFIG.P_HAL_FLASH, p_destFlash); //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}

    return isStarted;
}

static inline bool StartVerifyWriteUnit(const Flash_T * p_flash, const uint8_t * p_destFlash, const uint8_t * p_data)
{
	bool isStarted = false;

	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_PrepCmdVerifyWrite(p_flash->CONFIG.P_HAL_FLASH, p_destFlash); //Chip unique procedures
//	HAL_Flash_WriteCmdVerifyWrite(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_WriteCmdVerifyWriteDest(p_flash->CONFIG.P_HAL_FLASH, p_destFlash);
//	HAL_Flash_WriteCmdVerifyWriteStart(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdVerifyWriteUnit(p_flash->CONFIG.P_HAL_FLASH, p_destFlash); //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}

    return isStarted;
}

	//static inline bool StartVerifyEraseUnit(const Flash_T * p_flash, const uint8_t * p_destFlash)
	//{
	//	bool isStarted = false;
	//
	//	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
	////	HAL_Flash_PrepCmdVerifyErase(p_flash->CONFIG.P_HAL_FLASH, p_destFlash); //Chip unique procedures
	////	HAL_Flash_WriteCmdVerifyBlock(p_flash->CONFIG.P_HAL_FLASH);
	////	HAL_Flash_WriteCmdVerifyEraseDest(p_flash->CONFIG.P_HAL_FLASH, p_destFlash);
	////	HAL_Flash_WriteCmdVerifyEraseStart(p_flash->CONFIG.P_HAL_FLASH);
	//	HAL_Flash_StartCmdVerifyErase(p_flash->CONFIG.P_HAL_FLASH, p_destFlash);
	//	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}
	//
	//    return isStarted;
	//}


static inline bool StartVerifyEraseUnits(const Flash_T * p_flash, const uint8_t * p_destFlash, uint8_t units)
{
	bool isStarted = false;

	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdVerifyEraseUnits(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, units);
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}

    return isStarted;
}


static inline bool StartWriteOnce(const Flash_T * p_flash, const uint8_t * p_destFlash, const uint8_t * p_data)
{
	bool isStarted = false;

	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_PrepCmdWriteOnce(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, p_data); //Chip unique procedures
//	HAL_Flash_WriteCmdWriteOnce(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_WriteCmdWriteOnceDest(p_flash->CONFIG.P_HAL_FLASH, p_destFlash);
//	HAL_Flash_WriteCmdWriteOnceData(p_flash->CONFIG.P_HAL_FLASH, p_data);
//	HAL_Flash_WriteCmdWriteOnceStart(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdWriteOnce(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, p_data); //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}

    return isStarted;
}

static inline bool StartReadOnce(const Flash_T * p_flash, const uint8_t * p_destFlash)
{
	bool isStarted = false;

	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_PrepCmdWriteOnce(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, p_data); //Chip unique procedures
//	HAL_Flash_WriteCmdWriteOnce(p_flash->CONFIG.P_HAL_FLASH);
//	HAL_Flash_WriteCmdWriteOnceDest(p_flash->CONFIG.P_HAL_FLASH, p_destFlash);
//	HAL_Flash_WriteCmdWriteOnceData(p_flash->CONFIG.P_HAL_FLASH, p_data);
//	HAL_Flash_WriteCmdWriteOnceStart(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdReadOnce(p_flash->CONFIG.P_HAL_FLASH, p_destFlash); //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}

    return isStarted;
}





 


static inline bool StartWritePage(const Flash_T * p_flash, const uint8_t * p_destFlash, const uint8_t * p_data)
{
	bool isStarted = false;
	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdWritePage(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, p_data);  //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}
    return isStarted;
}

static inline bool StartEraseSector(const Flash_T * p_flash, const uint8_t * p_destFlash)
{
	bool isStarted = false;
	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdEraseSector(p_flash->CONFIG.P_HAL_FLASH, p_destFlash); //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}
    return isStarted;
}

static inline bool StartVerifyWriteUnit(const Flash_T * p_flash, const uint8_t * p_destFlash, const uint8_t * p_data)
{
	bool isStarted = false;
	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdVerifyWriteUnit(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, p_data); //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}
    return isStarted;
}

static inline bool StartVerifyEraseUnit(const Flash_T * p_flash, const uint8_t * p_destFlash)
{
	bool isStarted = false;
	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdVerifyEraseUnit(p_flash->CONFIG.P_HAL_FLASH, p_destFlash);
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}
	return isStarted;
}

static inline bool StartVerifyEraseUnits(const Flash_T * p_flash, const uint8_t * p_destFlash, uint8_t units)
{
	bool isStarted = false;
	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdVerifyEraseUnits(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, units);
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}
    return isStarted;
}

static inline bool StartWriteOnce(const Flash_T * p_flash, const uint8_t * p_destFlash, const uint8_t * p_data)
{
	bool isStarted = false;
	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdWriteOnce(p_flash->CONFIG.P_HAL_FLASH, p_destFlash, p_data); //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}
    return isStarted;
}

static inline bool StartReadOnce(const Flash_T * p_flash, const uint8_t * p_destFlash)
{
	bool isStarted = false;
	HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
	HAL_Flash_StartCmdReadOnce(p_flash->CONFIG.P_HAL_FLASH, p_destFlash); //Chip unique procedures
	if (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) != true)	{isStarted = true;}
    return isStarted;
}

 



 


	//bool Flash_PollOpSuccess(Flash_T *p_flash)
	//{
	//	if(Flash_PollWrite(p_flash))
	//	{
	//		return (p_flash->Status == FLASH_STATUS_SUCCESS) ? true : false;
	//	}
	//}
	
	
 

//or use uniform function pointer/wrapper
//bool StartOpCmd(const Flash_T * p_flash, size_t opIndex)
//{
//	//HAL_Flash_ClearErrorFlags(p_flash->CONFIG.P_HAL_FLASH);
//	const uint8_t * p_cmdDest = CalcOpCmdAddress(p_flash, &p_flash->p_OpDest[opIndex]);
//
//	switch(p_flash->OpType)
//	{
//		case FLASH_OPERATION_WRITE: 		HAL_Flash_StartCmdWritePage			(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest, &p_flash->p_OpData[opIndex]);	break;
//		case FLASH_OPERATION_ERASE:			HAL_Flash_StartCmdEraseSector		(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest); 								break;
//		case FLASH_OPERATION_VERIFY_WRITE:	HAL_Flash_StartCmdVerifyWriteUnit	(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest, &p_flash->p_OpData[opIndex]); 	break;
//		case FLASH_OPERATION_VERIFY_ERASE:	HAL_Flash_StartCmdVerifyEraseUnits	(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest, p_flash->UnitsPerCmd); 		break;
//		case FLASH_OPERATION_WRITE_ONCE:	HAL_Flash_StartCmdWriteOnce			(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest, &p_flash->p_OpData[opIndex]);	break;
//		case FLASH_OPERATION_READ_ONCE:		HAL_Flash_StartCmdReadOnce			(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest); 								break;
//		default: break;
//	}
//
//	return (HAL_Flash_ReadErrorFlags(p_flash->CONFIG.P_HAL_FLASH) == false) ? true : false;
//}

//static bool SetOpCommon(Flash_T * p_flash, const uint8_t * p_destFlash, const uint8_t * p_source, size_t size, Flash_Operation_T opType, size_t unitSize, uint8_t unitsPerCmd)
//{
//		p_flash->p_OpDest	= p_destFlash;
//		p_flash->OpIndex 	= 0U;
//		p_flash->OpType		= opType;
//		Flash_SetOpData(p_flash, p_source, size);
//		p_flash->UnitsPerCmd = unitsPerCmd;
//		p_flash->BytesPerCmd = unitsPerCmd * unitSize;
//}

//static bool SetOpCommon_MultiUnit(Flash_T * p_flash, uint8_t unitSize, uint8_t unitsPerCmd)
//{
//	p_flash->UnitsPerCmd = unitsPerCmd;
//	p_flash->BytesPerCmd = unitsPerCmd * unitSize;
//}
//
//static bool SetOpCommon_Fp(Flash_T * p_flash, Flash_Status_T (*checkStartVerify)(Flash_T *), Flash_Status_T (*parseErrorCode)(Flash_T *))
//{
//	p_flash->CheckStartVerify = checkStartVerify;
//	p_flash->ParseErrorCode = parseErrorCode;
//}

//static inline Flash_Status_T CheckVerify(const Flash_T * p_flash)
//{
//	return (p_flash->IsVerifyEnable == true) ? FLASH_STATUS_START_VERIFY : FLASH_STATUS_SUCCESS;
//}

//static inline Flash_Status_T CheckVerifyWrite(const Flash_T * p_flash)
//{
//	return (ChecksumOp(p_flash) == true) ? CheckVerify(p_flash) : FLASH_STATUS_ERROR_CHECKSUM;
//}
//
//static inline Flash_Status_T CheckVerifyErase(const Flash_T * p_flash)
//{
//	return CheckVerify(p_flash);
//}


 
