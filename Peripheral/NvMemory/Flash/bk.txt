

// select hal cmd by id
// or use uniform hal function pointer/wrapper

//pass params through struct
typedef void (*NvMemory_StartCmd_T)(void * p_this);

bool StartOpCmd(const Flash_T * p_flash)
{
	switch(p_flash->OpId)
	{
		case FLASH_OPERATION_WRITE: 		HAL_Flash_StartCmdWritePage			(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest, &p_flash->p_OpData[opIndex]);	break;
		case FLASH_OPERATION_ERASE:			HAL_Flash_StartCmdEraseSector		(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest); 								break;
		case FLASH_OPERATION_VERIFY_WRITE:	HAL_Flash_StartCmdVerifyWriteUnit	(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest, &p_flash->p_OpData[opIndex]); 	break;
		case FLASH_OPERATION_VERIFY_ERASE:	HAL_Flash_StartCmdVerifyEraseUnits	(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest, p_flash->UnitsPerCmd); 		break;
		case FLASH_OPERATION_WRITE_ONCE:	HAL_Flash_StartCmdWriteOnce			(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest, &p_flash->p_OpData[opIndex]);	break;
		case FLASH_OPERATION_READ_ONCE:		HAL_Flash_StartCmdReadOnce			(p_flash->CONFIG.P_HAL_FLASH, p_cmdDest); 								break;
		default: break;
	}
}